MVC architecture : Model View Controller
Ice-cream parlour:
 user --->vanilla(data/Model),cone(shape/view)--> Shopkeeper(Controller)  <--> Service
                                                   view resolver                 <--> Ice-cream box maintainer(Repository) <--> vanilla(data) : dao layer: Data Access Object layer
                                                                                 <--> Cup/cone(View)
                                                                                 <Cone with Ice-cream>

    user --> Request  --> shopkeeper
    user <-- Response --> shopkeeper

Rider or passenger : same
Controller : route request to correct person and resolves view
Service: It contains business logic


AddressService:(AddressModel)
 create(AddressData) : converts data into model
 updateAddress
 deleteAddress
 deleteAllAddress
 findAddressByUser(userID)
 findSavedAddressByUser(userID)

UserService: DriverService & RiderService & AdminService
  createUser(userData,role)
  updateUser(userID,userData,role)
  deleteUser(userID,userData,role)
  findUser(userID,role)

RiderService:
  findTotalRides()











Admin Dashboard: Create AdminController : Sneha
 - Onboard a new driver : /create/driver
 - Fetch all drivers/edit/delete : /editByID/{driverID}, /deleteByID/{driverID}, /driver/fetchAll

Vehicle Controller : Anupam
 - Fetch all vehicles/edit/delete :  /vehicle/editByID/{vehicleID}, /vehicle/deleteByID/{vehicleID}, /vehicle/fetchAll
 - Onboard a Vehicle : /vehicle/create
 - Assign a vehicle to a driver : GET --> vehicle/assign/driver


Driver Dashboard: DriverController : Tushar
 - total number of rides : /rides/all
 - Average Review of driver : /review
 - Total Earnings(day, week, month, total) : /totalEarning/{duration}

 - Vehicle assigned : /vehicle/details : Vaibhav
 - total ride duration(day, week, month, total) : /totalRides/{duration}
 - Name & details  : /details
 - Personal details update : /update/details

Rider Dashboard: : Atul
 - Profile details : /details
 -edit personal details : /update/details


 - total completed trips : /totalTrip/all : Bapi
 - average reviews : /review
 - location : /location



 ASSIGNMENT->
 VEHICLES: createVehicle,editVehicleByID,deleteVehicleByID,fetchVehicleByID,fetchAllVehicles : Anupam
 PASSENGERS: createPassenger,editPassengerByID,deletePassengerByID,fetchPassengerByID,fetchAllPassenger : Tushar
 TRIPS: createTrip(TripModel trip),editTripByID(int tripID),deleteTripByID(int tripID),fetchTripByID(int tripID),fetchAllTrips() : Sneha
 DRIVERS: createDriver,editDriverByID,deleteDriverByID,fetchDriverByID,fetchAllDriver


 INSERT STATEMENT to insert data in all 7 tables--> Min 10 : Atul,Bapi

 CalculationService: calculateTotalFare(int sourceLocID, int destLocID, CarType type) : double  -> Assign
                     findTotalEarning(int driverID)
                        - find all trips taken by driver
                        - sumUp amounts for allTrips
        SELECT SUM(amount) from trips where trip.driver_id=user.userID and user.role='driver';



Controller: handles request & return response
enum : custom datatype
exception : custom error message handling
models : java class equivalent to table in database
repo : repository - link to database and application
service : business logic

O-O : unidirection :
// trip has one to one relation with driver & passenger
findTripByDriver(int driver)

// findAllUserstravelledFrom(src_locId,dest_locid) : select * from trips join users on trips.passenger_id = users.userID where src=x AND dest=y and users.role=Passenger;
// findAllTripsBySourceAndDestination
List<UserModel>

//table name: test
//findByID(iID) : SELECT * from test where id = 23;
//save(model) : INSERT into Test values("abc,23);
//delete(model) : delete from test where id = model.getID;
// findAll() : select * from test;
// findByIdAndColor(id, color) : select * from test where id=12 AND color= red;
// findByIdOrColor(id,color): select * from test where id=12 AND color= red;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import java.util.List;

public interface TripRepository extends JpaRepository<Trip, Long> {

    @Query("SELECT t FROM Trip t JOIN t.passenger u WHERE t.src = :src AND t.dest = :dest AND u.role = 'Passenger'")
    List<Trip> findTripsBySrcDestAndPassengerRole(String src, String dest);
}
